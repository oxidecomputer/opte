[package]
name = "oxide-vpc"
version = "0.1.0"
edition = "2021"

# The api feature is used by consumers of the Oxide VPC
# implementation, namely Omicron.
#
# The engine feature is used by the OPTE driver that provides the
# Oxide VPC implementation, namely xde.
[features]
default = ["api", "std"]
api = ["opte/api"]
engine = ["api", "opte/engine"]
kernel = ["opte/kernel"]
std = ["opte/std"]
#
# XXX: This is a hack in order for integration tests to make use of
# test-only methods.
#
# For a method/function to be used by both unit and integration tests
# mark them with the following:
#
# #[cfg(any(feature = "test-help", test))]
#
test-help = ["opte/test-help"]
usdt = ["opte/usdt"]

[dependencies]
cfg-if = "0.1"
illumos-sys-hdrs = { path = "../illumos-sys-hdrs" }
opte = { path = "../opte", default-features = false }
zerocopy = "0.6.1"

[dependencies.serde]
version = "1.0"
default-features = false
features = ["alloc", "derive"]

[dependencies.smoltcp]
version = "0.8.0"
default-features = false

[dev-dependencies]
ctor = "0.1.22"
#
# XXX: This is a hack in order for the integration tests to run. The
# integration tests concern themselves with the behavior of the engine
# code, and we would like to enable that feature without requiring the
# developer to always pass `--features=engine` explicitly.
#
# You might think it would be nice if one could somehow specify that a
# given integration test relies on a given feature, and you would not
# be alone, as there is an open issue for just such a feature:
#
# https://github.com/rust-lang/cargo/issues/2911
#
oxide-vpc = { path = ".", features = ["engine", "test-help", "usdt"] }
pcap-parser = { version = "0.11.1", features = ["serialize"] }
usdt = "0.3.5"